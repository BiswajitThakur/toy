use std::fmt;

#[allow(unused)]
#[derive(Debug, Clone, Copy, Default)]
pub enum Status {
    Continue,
    SwitchingProtocols,
    Processing,
    EarlyHints,
    #[default]
    OK,
    Created,
    Accepted,
    NonAuthoritativeInformation,
    NoContent,
    ResetContent,
    PartialContent,
    MultiStatus,
    AlreadyReported,
    IMUsed,
    MultipleChoices,
    MovedPermanently,
    Found,
    SeeOther,
    NotModified,
    TemporaryRedirect,
    PermanentRedirect,
    BadRequest,
    Unauthorized,
    PaymentRequired,
    Forbidden,
    NotFound,
    MethodNotAllowed,
    NotAcceptable,
    ProxyAuthenticationRequired,
    RequestTimeout,
    Conflict,
    Gone,
    LengthRequired,
    PreconditionFailed,
    ContentTooLarge,
    URITooLong,
    UnsupportedMediaType,
    RangeNotSatisfiable,
    ExpectationFailed,
    ImATeapot,
    MisdirectedRequest,
    UnprocessableContent,
    Locked,
    FailedDependency,
    TooEarly,
    UpgradeRequired,
    PreconditionRequired,
    TooManyRequests,
    RequestHeaderFieldsTooLarge,
    UnavailableForLegalReasons,
    InternalServerError,
    NotImplemented,
    BadGateway,
    ServiceUnavailable,
    GatewayTimeout,
    HTTPVersionNotSupported,
    VariantAlsoNegotiates,
    InsufficientStorage,
    LoopDetected,
    NotExtended,
    NetworkAuthenticationRequired,
}

impl From<Status> for u32 {
    fn from(val: Status) -> Self {
        match val {
            Status::Continue => 100,
            Status::SwitchingProtocols => 101,
            Status::Processing => 102,
            Status::EarlyHints => 103,
            Status::OK => 200,
            Status::Created => 201,
            Status::Accepted => 202,
            Status::NonAuthoritativeInformation => 203,
            Status::NoContent => 204,
            Status::ResetContent => 205,
            Status::PartialContent => 206,
            Status::MultiStatus => 207,
            Status::AlreadyReported => 208,
            Status::IMUsed => 226,
            Status::MultipleChoices => 300,
            Status::MovedPermanently => 301,
            Status::Found => 302,
            Status::SeeOther => 303,
            Status::NotModified => 304,
            Status::TemporaryRedirect => 307,
            Status::PermanentRedirect => 308,
            Status::BadRequest => 400,
            Status::Unauthorized => 401,
            Status::PaymentRequired => 402,
            Status::Forbidden => 403,
            Status::NotFound => 404,
            Status::MethodNotAllowed => 405,
            Status::NotAcceptable => 406,
            Status::ProxyAuthenticationRequired => 407,
            Status::RequestTimeout => 408,
            Status::Conflict => 409,
            Status::Gone => 410,
            Status::LengthRequired => 411,
            Status::PreconditionFailed => 412,
            Status::ContentTooLarge => 413,
            Status::URITooLong => 414,
            Status::UnsupportedMediaType => 415,
            Status::RangeNotSatisfiable => 416,
            Status::ExpectationFailed => 417,
            Status::ImATeapot => 418,
            Status::MisdirectedRequest => 421,
            Status::UnprocessableContent => 422,
            Status::Locked => 423,
            Status::FailedDependency => 424,
            Status::TooEarly => 425,
            Status::UpgradeRequired => 426,
            Status::PreconditionRequired => 428,
            Status::TooManyRequests => 429,
            Status::RequestHeaderFieldsTooLarge => 431,
            Status::UnavailableForLegalReasons => 451,
            Status::InternalServerError => 500,
            Status::NotImplemented => 501,
            Status::BadGateway => 502,
            Status::ServiceUnavailable => 503,
            Status::GatewayTimeout => 504,
            Status::HTTPVersionNotSupported => 505,
            Status::VariantAlsoNegotiates => 506,
            Status::InsufficientStorage => 507,
            Status::LoopDetected => 508,
            Status::NotExtended => 510,
            Status::NetworkAuthenticationRequired => 511,
        }
    }
}

impl fmt::Display for Status {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::Continue => write!(f, "100 Continue"),
            Self::SwitchingProtocols => write!(f, "101 Switching Protocols"),
            Self::Processing => write!(f, "102 Processing"),
            Self::EarlyHints => write!(f, "103 Early Hints"),
            Self::OK => write!(f, "200 OK"),
            Self::Created => write!(f, "201 Created"),
            Self::Accepted => write!(f, "202 Accepted"),
            Self::NonAuthoritativeInformation => write!(f, "203 Non-Authoritative Information"),
            Self::NoContent => write!(f, "204 No Content"),
            Self::ResetContent => write!(f, "205 Reset Content"),
            Self::PartialContent => write!(f, "206 Partial Content"),
            Self::MultiStatus => write!(f, "207 Multi-Status"),
            Self::AlreadyReported => write!(f, "208 Already Reported"),
            Self::IMUsed => write!(f, "226 IM Used"),
            Self::MultipleChoices => write!(f, "300 Multiple Choices"),
            Self::MovedPermanently => write!(f, "301 Moved Permanently"),
            Self::Found => write!(f, "302 Found"),
            Self::SeeOther => write!(f, "303 See Other"),
            Self::NotModified => write!(f, "304 Not Modified"),
            Self::TemporaryRedirect => write!(f, "307 Temporary Redirect"),
            Self::PermanentRedirect => write!(f, "308 Permanent Redirect"),
            Self::BadRequest => write!(f, "400 Bad Request"),
            Self::Unauthorized => write!(f, "401 Unauthorized"),
            Self::PaymentRequired => write!(f, "402 Payment Required"),
            Self::Forbidden => write!(f, "403 Forbidden"),
            Self::NotFound => write!(f, "404 Not Found"),
            Self::MethodNotAllowed => write!(f, "405 Method Not Allowed"),
            Self::NotAcceptable => write!(f, "406 Not Acceptable"),
            Self::ProxyAuthenticationRequired => write!(f, "407 Proxy Authentication Required"),
            Self::RequestTimeout => write!(f, "408 Request Timeout"),
            Self::Conflict => write!(f, "409 Conflict"),
            Self::Gone => write!(f, "410 Gone"),
            Self::LengthRequired => write!(f, "411 Length Required"),
            Self::PreconditionFailed => write!(f, "412 Precondition Failed"),
            Self::ContentTooLarge => write!(f, "413 Content Too Large"),
            Self::URITooLong => write!(f, "414 URI Too Long"),
            Self::UnsupportedMediaType => write!(f, "415 Unsupported Media Type"),
            Self::RangeNotSatisfiable => write!(f, "416 Range Not Satisfiable"),
            Self::ExpectationFailed => write!(f, "417 Expectation Failed"),
            Self::ImATeapot => write!(f, "418 I'm a teapot"),
            Self::MisdirectedRequest => write!(f, "421 Misdirected Request"),
            Self::UnprocessableContent => write!(f, "422 Unprocessable Content"),
            Self::Locked => write!(f, "423 Locked"),
            Self::FailedDependency => write!(f, "424 Failed Dependency"),
            Self::TooEarly => write!(f, "425 Too Early"),
            Self::UpgradeRequired => write!(f, "426 Upgrade Required"),
            Self::PreconditionRequired => write!(f, "428 Precondition Required"),
            Self::TooManyRequests => write!(f, "429 Too Many Requests"),
            Self::RequestHeaderFieldsTooLarge => write!(f, "431 Request Header Fields Too Large"),
            Self::UnavailableForLegalReasons => write!(f, "451 Unavailable For Legal Reasons"),
            Self::InternalServerError => write!(f, "500 Internal Server Error"),
            Self::NotImplemented => write!(f, "501 Not Implemented"),
            Self::BadGateway => write!(f, "502 Bad Gateway"),
            Self::ServiceUnavailable => write!(f, "503 Service Unavailable"),
            Self::GatewayTimeout => write!(f, "504 Gateway Timeout"),
            Self::HTTPVersionNotSupported => write!(f, "505 HTTP Version Not Supported"),
            Self::VariantAlsoNegotiates => write!(f, "506 Variant Also Negotiates"),
            Self::InsufficientStorage => write!(f, "507 Insufficient Storage"),
            Self::LoopDetected => write!(f, "508 Loop Detected"),
            Self::NotExtended => write!(f, "510 Not Extended"),
            Self::NetworkAuthenticationRequired => write!(f, "511 Network Authentication Required"),
        }
    }
}
